model = "NBGLM.txt",
n.thin = 1,
n.chains = 3,
n.burnin = 2500,
n.iter = 5000)
NB.data
NB.data <- list(
Y = negbml$nby,
X = X,
K = K,
N = nobs,
M = M,
xx = xx)
sink("NBGLM.txt")
cat(" model{
# Priors for coefficients
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001)}
# Prior for dispersion
theta ~ dgamma(1e-3,1e-3)
# Likelihood function
for (i in 1:N){
Y[i] ~ dnegbin(p[i], theta)
p[i] <- theta/(theta + mu[i])
mu[i] <- exp(eta[i])
eta[i] <- inprod(beta[], X[i,])
}
# Prediction
for (j in 1:M){
etax[j] <- beta[1]+beta[2]*xx[j]
px[j] <- theta/(theta + mux[j])
mux[j] <- exp(etax[j])
Yx[j] ~ dnegbin(px[j], theta)
}
",fill = TRUE)
sink()
# set initial values
inits <- function () { list(
beta = rnorm(K, 0, 0.1),
theta = runif(0.00, 5) )
}
# define parameters
params <- c("beta", "theta","Yx")
NB2 <- jags(data = NB.data,
inits = inits,
parameters = params,
model = "NBGLM.txt",
n.thin = 1,
n.chains = 3,
n.burnin = 2500,
n.iter = 5000)
# check results
print(NB2, intervals=c(0.025, 0.975), digits=3)
# Plot
yx <- jagsresults(x=NB2, params=c('Yx'))
NBdata <- data.frame(x1,nby)
gdata <- data.frame(x =xx, mean = yx[,"50%"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
asinh_trans <- function(){
trans_new(name = 'asinh', transform = function(x) asinh(x),
inverse = function(x) sinh(x))
}
ggplot(NBdata,aes(x=x1,y=nby))+ geom_point(colour="green",size=1,alpha=0.35)+
geom_point(size=1.75,colour="green3")+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.3, fill=c("red"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.2, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+
scale_y_continuous(trans = 'asinh',breaks=c(0,10,100,1000,10000,100000),
labels=c("0",expression(10^1),expression(10^2),expression(10^3),expression(10^4),expression(10^5)))
nobs= 100; x1 <- runif(nobs)
mu <- 1 + 3*x1
y <- rnorm(nobs, mu, sd=0.25)
# Fit model
fit <- lm(y ~ x1)
summary(fit)
source('~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Normal/Ex1_normal_x1.R', echo=TRUE)
ummary(fit)
summary(fit)
source('~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Normal/Ex5_normal_JAGS_x1.R', echo=TRUE)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Normal")
source('~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Normal/Ex5_normal_JAGS_x1.R', echo=TRUE)
y
X
jagsfit
params <- c("beta", "sigma")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
jagsfit
require(mcmcplots)
traplot(jagsfit)
caterplot(jagsfits)
caterplot(jagsfit)
denplot(jagsfit)
source('~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Normal/Ex6_normal_JAGS_x1_quadratic_cubic.R', echo=TRUE)
ggplot(normdata,aes(x=x1,y=y))+ geom_point(colour="#de2d26",size=1,alpha=0.35)+
geom_point(size=1.75,colour="green3")+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange3"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
source('~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Normal/Ex8_normal_JAGS_HubbleResiduals.R', echo=TRUE)
traplot(NORM,c("beta", "sigma"))
ggplot(nmod,aes(x=obsx1,y=obsy))+
geom_errorbar(aes(ymin=obsy-erry,ymax=obsy+erry),alpha=0.5,width=0.025,colour="gray70")+
geom_errorbarh(aes(xmin=obsx1-errx1,
xmax=obsx1+errx1),alpha=0.5,height=0.025,colour="gray70")+
geom_point(size=2,color="blue")+
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr2, ymax=upr2), alpha=0.15, fill=c("orange")) +
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr1, ymax=upr1), alpha=0.50, fill=c("orange3")) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="red",linetype="dashed",size=1.5)+
theme_bw()+
ylab(expression(mu[SN]-mu[z]))+
xlab(expression(log~M/M['\u0298']))+
coord_cartesian(xlim=c(8,13),ylim=c(-1,1))
traplot(NORM,c("beta", "sigma"))
denplot(NORM,c("beta", "sigma"))
source('~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Bernoulli/Ex1_Bernoulli_x1_quadratic.R', echo=TRUE)
source('~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Bernoulli/Ex2_Bernoulli_x1_x2.R', echo=TRUE)
source('~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Bernoulli/Ex4_Bernoulli_JAGS_x1.R', echo=TRUE)
traplot(jagsfit,c("beta"))
jagsfit<- jags(data       = logit_data,
inits      = inits,
parameters = params,
model      = textConnection(LOGIT),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 5000,
n.iter     = 10000)
traplot(jagsfit,c("beta"))
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="blue",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
source('~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Bernoulli/Ex5_Bernoulli_JAGS_SFR.R', echo=TRUE)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Bernoulli")
source('~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Bernoulli/Ex5_Bernoulli_JAGS_SFR.R', echo=TRUE)
require(R2jags)
require(ggplot2)
source("..//Auxiliar_functions/jagsresults.R")
SFR_dat<-read.csv("..//astro_data/SFR.csv")
x1 <- log(SFR_dat$Xmol,10)
by <- SFR_dat$SFR
nobs <- nrow(SFR_dat)
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
# Construct data dictionary
logitmod <-data.frame(by, x1)
X <- model.matrix(~ 1+x1+I(x1^2)+I(x1^3),
data = logitmod)
XX <- model.matrix(~1+xx+I(xx^2)+I(xx^3))
K <- ncol(X)
logit_data <- list(Y  = logitmod$by, # Response variable
X  = X,           # Predictors
K  = K,           # Number of Predictors including the intercept
N  = nobs,        # Sample size
XX = XX,
M = M
)
# JAGS code
LOGIT<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Likelihood function
for (i in 1:N){
Y[i] ~ dbern(p[i])
logit(p[i]) <- eta[i]
eta[i]  <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-inprod(beta[], XX[j,])
logit(px[j]) <- etax[j]
Yx[j]~dbern(px[j])
}
}"
#A function to generate initial values for mcmc
inits  <- function () {
list(beta  = rnorm(ncol(X), 0, 0.1)  )
}
# define parameters
params <- c("beta","px")
# Fit
jagsfit<- jags(data       = logit_data,
inits      = inits,
parameters = params,
model      = textConnection(LOGIT),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 2500,
n.iter     = 8000)
# check results
jagsresults(x=jagsfit, params=c("beta"))
# Bin data for visualization
binx<-0.5
t.breaks <-cut(x1, seq(min(x1),max(x1), by=binx))
means <-tapply(by, t.breaks, mean)
semean <-function(x) sd(x)/sqrt(length(x))
means.se <-tapply(by, t.breaks, semean)
# Plot
y <- jagsresults(x=jagsfit, params=c('px'))
x <- xx
gdata <- data.frame(x =xx, mean = y[,"mean"],lwr1=y[,"25%"],lwr2=y[,"2.5%"],upr1=y[,"75%"],upr2=y[,"97.5%"])
gbin<-data.frame(x=seq(binx+min(x1),max(x1), by=binx),y=means)
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1.25,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=3,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),
colour="blue",width=0.01)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))+xlab(expression(log~x[mol]))+ylab("Probability of star formation activity")+
theme(axis.title=element_text(size=25))
source('~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Count_models/Ex1_Poisson.R', echo=TRUE)
nobs <- 500                                           # number of observations
x1 <- rnorm(nobs,10,2)                                     # random uniform variable
xb <- 1 + 2*x1                                        # linear predictor
py <- rpois(nobs, exp(xb))                            # create py as adjusted random Poisson variate
poismod <- data.frame(py,x1)
# Prepare data for prediction
M=1000                                                # Sample size
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
# prepare data for JAGS input
X <- model.matrix(~ x1, data = poismod)
K <- ncol(X)                                          # Number of betas
POIS.data <- list(Y = py,
X = X,
K = K,
N = nobs,
xx = xx,
M = M)
# JAGS model
Pois<-"model{
# non-informative prior for coefficients
for (i in 1:K) {beta[i] ~ dnorm(0, 1e-4)}
# likelihood function
for (i in 1:N) {
Y[i] ~ dpois(mu[i])
log(mu[i]) <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
log(mux[j])<-beta[1]+beta[2]*xx[j]
Yx[j]~dpois(mux[j])
}
}"
# set initial values
inits  <- function () {
list(beta = rnorm(K, 0, 0.1))
}
# set parameter for prediction
params <- c("Yx")
# fit
P1 <-   jags(data       = POIS.data,
inits      = inits,
parameters = params,
model      = textConnection(Pois),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 2500,
n.iter     = 5000)
# check results
print(P1, intervals=c(0.025, 0.975), digits=3)
# Plot
yx <- jagsresults(x=P1, params=c('Yx'))
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(poismod ,aes(x=x1,y=py))+
geom_point(colour="blue3",size=1.5,alpha=0.9)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.35, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.15, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
x1 <- rnorm(nobs,0,2)                                     # random uniform variable
xb <- 1 + 2*x1                                        # linear predictor
py <- rpois(nobs, exp(xb))                            # create py as adjusted random Poisson variate
poismod <- data.frame(py,x1)
# Prepare data for prediction
M=1000                                                # Sample size
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
# prepare data for JAGS input
X <- model.matrix(~ x1, data = poismod)
K <- ncol(X)                                          # Number of betas
POIS.data <- list(Y = py,
X = X,
K = K,
N = nobs,
xx = xx,
M = M)
# JAGS model
Pois<-"model{
# non-informative prior for coefficients
for (i in 1:K) {beta[i] ~ dnorm(0, 1e-4)}
# likelihood function
for (i in 1:N) {
Y[i] ~ dpois(mu[i])
log(mu[i]) <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
log(mux[j])<-beta[1]+beta[2]*xx[j]
Yx[j]~dpois(mux[j])
}
}"
# set initial values
inits  <- function () {
list(beta = rnorm(K, 0, 0.1))
}
# set parameter for prediction
params <- c("Yx")
# fit
P1 <-   jags(data       = POIS.data,
inits      = inits,
parameters = params,
model      = textConnection(Pois),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 2500,
n.iter     = 5000)
# check results
print(P1, intervals=c(0.025, 0.975), digits=3)
# Plot
yx <- jagsresults(x=P1, params=c('Yx'))
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(poismod ,aes(x=x1,y=py))+
geom_point(colour="blue3",size=1.5,alpha=0.9)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.35, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.15, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
install.packages("ggplot2movies")
install.packages("gglasso")
x<-matrix(rnorm(50*20),ncol=20)
s<- var(x)
a<-glasso(s, rho=.01)
aa<-glasso(s,rho=.02, w.init=a$w, wi.init=a$wi)
# example with structural zeros and no regularization,
# from Whittaker's Graphical models book  page xxx.
s=c(10,1,5,4,10,2,6,10,3,10)
S=matrix(0,nrow=4,ncol=4)
S[row(S)>=col(S)]=s
S=(S+t(S))
diag(S)<-10
zero<-matrix(c(1,3,2,4),ncol=2,byrow=TRUE)
a<-glasso(S,0,zero=zero)
library("glasso", lib.loc="~/Library/R/3.2/library")
x<-matrix(rnorm(50*20),ncol=20)
s<- var(x)
a<-glasso(s, rho=.01)
aa<-glasso(s,rho=.02, w.init=a$w, wi.init=a$wi)
# example with structural zeros and no regularization,
# from Whittaker's Graphical models book  page xxx.
s=c(10,1,5,4,10,2,6,10,3,10)
S=matrix(0,nrow=4,ncol=4)
S[row(S)>=col(S)]=s
S=(S+t(S))
diag(S)<-10
zero<-matrix(c(1,3,2,4),ncol=2,byrow=TRUE)
a<-glasso(S,0,zero=zero)
a<-glasso(S,5,zero=zero)
a
glassopath(S)
a
aa
plot(a)
install.packages("ggbeeswarm")
library("ggbeeswarm", lib.loc="~/Library/R/3.2/library")
ggplot2::qplot(class, hwy, data = ggplot2::mpg, position=position_quasirandom())
# Generate fake data
distro <- data.frame(
'variable'=rep(c('runif','rnorm'),each=100),
'value'=c(runif(100, min=-3, max=3), rnorm(100))
)
ggplot2::qplot(variable, value, data = distro, position = position_quasirandom())
ggplot2::qplot(variable, value, data = distro) +
geom_beeswarm(priority='density',cex=2.5)
library("ggmap", lib.loc="~/Library/R/3.2/library")
# Fit
jagsfit<- jags(data       = logit_data,
inits      = inits,
parameters = params,
model      = textConnection(LOGIT),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 2500,
n.iter     = 8000)
# check results
jagsresults(x=jagsfit, params=c("beta"))
# Bin data for visualization
binx<-0.5
t.breaks <-cut(x1, seq(min(x1),max(x1), by=binx))
means <-tapply(by, t.breaks, mean)
semean <-function(x) sd(x)/sqrt(length(x))
means.se <-tapply(by, t.breaks, semean)
# Plot
y <- jagsresults(x=jagsfit, params=c('px'))
x <- xx
gdata <- data.frame(x =xx, mean = y[,"mean"],lwr1=y[,"25%"],lwr2=y[,"2.5%"],upr1=y[,"75%"],upr2=y[,"97.5%"])
gbin<-data.frame(x=seq(binx+min(x1),max(x1), by=binx),y=means)
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1.25,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=3,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),
colour="blue",width=0.01)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))+xlab(expression(log~x[mol]))+ylab("Probability of star formation activity")+
theme(axis.title=element_text(size=25))
source('~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Bernoulli/Ex5_Bernoulli_JAGS_SFR.R', echo=TRUE)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Bernoulli")
source('~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Bernoulli/Ex5_Bernoulli_JAGS_SFR.R', echo=TRUE)
mu_hat <- function (tau, y, sigma){  sum(y/(sigma^2 + tau^2))/sum(1/(sigma^2 + tau^2))}V_mu <- function (tau, y, sigma){  1/sum(1/(tau^2 + sigma^2))}n_grid <- 2000tau_grid <- seq (.01, 40, length=n_grid)log_p_tau <- rep (NA, n_grid)for (i in 1:n_grid){  mu <- mu_hat (tau_grid[i], y, sigma)  V <- V_mu (tau_grid[i], y, sigma)  log_p_tau[i] <- .5*log(V) - .5*sum(log(sigma^2 + tau_grid[i]^2)) -    .5*sum((y-mu)^2/(sigma^2 + tau_grid[i]^2))}
mu_hat <- function (tau, y, sigma){  sum(y/(sigma^2 + tau^2))/sum(1/(sigma^2 + tau^2))}
mu_hat <- function(tau, y, sigma){  sum(y/(sigma^2 + tau^2))/sum(1/(sigma^2 + tau^2))}
mu_hat <- function(tau, y, sigma){sum(y/(sigma^2 + tau^2))/sum(1/(sigma^2 + tau^2))}
mu_hat <- function(tau, y, sigma){  sum(y/(sigma^2 + tau^2))/sum(1/(sigma^2 + tau^2))}
mu_hat<- function(tau, y, sigma){  sum(y/(sigma^2 + tau^2))/sum(1/(sigma^2 + tau^2))}
mu_hat<- function(tau,y,sigma){  sum(y/(sigma^2 + tau^2))/sum(1/(sigma^2 + tau^2))}
mu_hat<- function(tau,y,sigma)  {  sum(y/(sigma^2 + tau^2))/sum(1/(sigma^2 + tau^2))}
mu_hat<- function(tau,y,sigma){  sum(y/(sigma^2 + tau^2))/sum(1/(sigma^2 + tau^2))}
V_mu <- function (tau, y, sigma){  1/sum(1/(tau^2 + sigma^2))}
mu_hat <- function(tau,y,sigma){  sum(y/(sigma^2+tau^2))/sum(1/(sigma^2+tau^2))}
sum(y/(sigma^2+tau^2))/sum(1/(sigma^2+tau^2))
y = 3sigma =3tau =5sum(y/(sigma^2+tau^2))/sum(1/(sigma^2+tau^2))
y = 3
sigma =3
tau =5
sum(y/(sigma^2+tau^2))/sum(1/(sigma^2+tau^2))
y = 3sigma =3tau =5sum(y/(sigma^2+tau^2))/sum(1/(sigma^2+tau^2))
y <- 3sigma =3tau =5sum(y/(sigma^2+tau^2))/sum(1/(sigma^2+tau^2))
y <- 3sigma =3
y <- 3;sigma =3
y <- 3;sigma =3;
mu_hat <- function(tau,y,sigma){
sum(y/(sigma^2+tau^2))/sum(1/(sigma^2+tau^2))
}
V_mu <- function (tau, y, sigma){
1/sum(1/(tau^2 + sigma^2))
}
n_grid <- 2000
tau_grid <- seq (.01, 40, length=n_grid)
log_p_tau <- rep (NA, n_grid)
for (i in 1:n_grid){
mu <- mu_hat (tau_grid[i], y, sigma)
V <- V_mu (tau_grid[i], y, sigma)
log_p_tau[i] <- .5*log(V) - .5*sum(log(sigma^2 + tau_grid[i]^2)) -
.5*sum((y-mu)^2/(sigma^2 + tau_grid[i]^2))
}
log_p_tau <- log_p_tau - max(log_p_tau)
p_tau <- exp(log_p_tau)
p_tau <- p_tau/sum(p_tau)
n_sims <- 1000
tau <- sample (tau_grid, n_sims, replace=TRUE, prob=p_tau)
mu <- rep (NA, n_sims)
theta <- array (NA, c(n_sims,J))
for (i in 1:n_sims){
mu[i] <- rnorm (1, mu_hat(tau[i],y,sigma), sqrt(V_mu(tau[i],y,sigma)))
theta_mean <- (mu[i]/tau[i]^2 + y/sigma^2)/(1/tau[i]^2 + 1/sigma^2)
theta_sd <- sqrt(1/(1/tau[i]^2 + 1/sigma^2))
theta[i,] <- rnorm (J, theta_mean, theta_sd)
}
25^2
source("https://bioconductor.org/biocLite.R")
biocLite("vbmp")
install.packages("bspec")
library("bspec", lib.loc="~/Library/R/3.2/library")
lhspec1 <- bspec(lh)
lhspec1
print(acf(lhspec1))
tr(acf(lhspec1))
str(acf(lhspec1, spec=sample(lhspec1)))
lhspec2 <- bspec(lh, priordf=2, priorscale=0.6, intercept=FALSE)print(acf(lhspec2))str(acf(lhspec2))plot(acf(lhspec2))
plot(acf(lhspec2))), priordf=2, priorscale=0.6, intercept=FALSE)
plot(acf(lhspec2), priordf=2, priorscale=0.6, intercept=FALSE)
plot(acf(lhspec2))
lhspec2 <- bspec(lh, priordf=2, priorscale=0.6, intercept=FALSE)
plot(acf(lhspec2))
lines(lhspec2$freq, sample(lhspec), type="b", pch=20)
lines(lhspec2$freq, sample(lhspec2), type="b", pch=20)
lhspec <- bspec(lh)
plot(lhspec)
lines(lhspec$freq, sample(lhspec), type="b", pch=20)
data(sunspots)
spots1 <- window(sunspots, 1750, 1819.99)spots2 <- window(sunspots, 1830, 1899.99)spots3 <- window(sunspots, 1910, 1979.99)
spots1 <- window(sunspots, 1750, 1819.99);spots2 <- window(sunspots, 1830, 1899.99);spots3 <- window(sunspots, 1910, 1979.99)
spots3 <- window(sunspots, 1910, 1979.99)
tsp(spots3) <- tsp(spots2) <- tsp(spots1)
plot(bspec(spots1))
spec1 <- empiricalSpectrum(spots1)plot(spec1$frequency, spec1$power, log="y", type="b")
spec1 <- empiricalSpectrum(spots1)
plot(spec1$frequency, spec1$power, log="y", type="b")
plot(spec1$frequency, spec1$power, type="b")
plot(spec1$frequency, spec1$power, log="y", type="b")
spec2 <- spectrum(lh, plot=FALSE)lines(spec2$freq, spec2$spec, col="red")''
