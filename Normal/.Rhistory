# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- beta[1]+beta[2]*X[i,2]
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]
mux[j]  <- etax[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
# set initial values
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
# define parameters
#params <- c("beta", "sigma","Yx")
params <- c("beta", "sigma")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/ADA8/Normal")
# ADA8 – Astronomical Data Analysis Summer School
# Bayesian tutorial by Rafael S. de Souza - ELTE, Hungary & COIN
#
# Partial example from Bayesian Models for Astrophysical Data
# by Hilbe, de Souza & Ishida, 2016, Cambridge Univ. Press
#
# Example of Bayesian normal linear regression in R using JAGS
# synthetic data
# 1 response (y) and 1 explanatory variable (x1)
require(R2jags)
source("..//Auxiliar_functions/jagsresults.R")
require(ggplot2)
set.seed(1056)                 # set seed to replicate example
nobs= 500                      # number of obs in model
x1 <- runif(nobs,5,2)          # random uniform variable
xb <- 2 + 3*x1                 # linear predictor
y <- rnorm(nobs, xb, sd=2)     # create y as adjusted random normal variate
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
# prepare data for JAGS input
X <- model.matrix(~ 1 + x1)
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
# JAGS model
NORM <-" model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Uniform prior for standard deviation
tau <- pow(sigma, -2)       # precision
sigma ~ dunif(0, 100)       # standard deviation
# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- beta[1]+beta[2]*X[i,2]
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]
mux[j]  <- etax[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
# set initial values
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
# define parameters
#params <- c("beta", "sigma","Yx")
params <- c("beta", "sigma")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
# ADA8 – Astronomical Data Analysis Summer School
# Bayesian tutorial by Rafael S. de Souza - ELTE, Hungary & COIN
#
# Partial example from Bayesian Models for Astrophysical Data
# by Hilbe, de Souza & Ishida, 2016, Cambridge Univ. Press
#
# Example of Bayesian normal linear regression in R using JAGS
# synthetic data
# 1 response (y) and 1 explanatory variable (x1)
require(R2jags)
source("..//Auxiliar_functions/jagsresults.R")
require(ggplot2)
set.seed(1056)                 # set seed to replicate example
nobs= 500                      # number of obs in model
x1 <- runif(nobs,5,2)          # random uniform variable
xb <- 2 + 3*x1                 # linear predictor
y <- rnorm(nobs, xb, sd=2)     # create y as adjusted random normal variate
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
require(R2jags)
source("..//Auxiliar_functions/jagsresults.R")
require(ggplot2)
set.seed(1056)                 # set seed to replicate example
nobs= 500                      # number of obs in model
x1 <- runif(nobs,5,2)          # random uniform variable
set.seed(1056)                 # set seed to replicate example
nobs= 500                      # number of obs in model
x1 <- runif(nobs,2,5)          # random uniform variable
xb <- 2 + 3*x1                 # linear predictor
y <- rnorm(nobs, xb, sd=2)     # create y as adjusted random normal variate
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
# prepare data for JAGS input
X <- model.matrix(~ 1 + x1)
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
# JAGS model
NORM <-" model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Uniform prior for standard deviation
tau <- pow(sigma, -2)       # precision
sigma ~ dunif(0, 100)       # standard deviation
# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- beta[1]+beta[2]*X[i,2]
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]
mux[j]  <- etax[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
# set initial values
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
# define parameters
#params <- c("beta", "sigma","Yx")
params <- c("beta", "sigma")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
plot(x1,y)
# prepare data for JAGS input
X <- model.matrix(~ 1 + x1)
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
jags_data
X
rnorm(K, 0, 0.01)
inits
inits()
params <- c("beta", "sigma")
jags_data
jags_data$Y
jags_data$N
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
require(mcmcplots)
traplot(jagsfit)
denplot(jagsfit)
yx <- jagsresults(x=jagsfit, params=c('Yx'))
normdata <- data.frame(x1,y)
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(normdata,aes(x=x1,y=y))+ geom_point(colour="#de2d26",size=1,alpha=0.35)+
geom_point(size=1.5,colour="red3")+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange3"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
params <- c("beta", "sigma","Yx")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
yx <- jagsresults(x=jagsfit, params=c('Yx'))
normdata <- data.frame(x1,y)
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(normdata,aes(x=x1,y=y))+ geom_point(colour="#de2d26",size=1,alpha=0.35)+
geom_point(size=1.5,colour="red3")+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange3"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
xx
params <- c("beta", "sigma","Yx")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
jagsfit
params <- c("beta", "sigma")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
jagsfit
params <- c("beta", "sigma","Yx")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
jagsresults(x=jagsfit, params=c('Yx'))
jagsresults(x=jagsfit, params=c('Yx'))[1,]
jagsresults(x=jagsfit, params=c('Yx'))[1:5,]
gdata
gdata[1,]
ggplot(normdata,aes(x=x1,y=y))+ geom_point(colour="#de2d26",size=1,alpha=0.35)
+
geom_point(size=1.5,colour="red3")
ggplot(normdata,aes(x=x1,y=y))+ geom_point(colour="#de2d26",size=1,alpha=0.35)
(colour="#de2d26",size=1,alpha=0.35)+
geom_point(size=1.5,colour="red3")
ggplot(normdata,aes(x=x1,y=y))+ geom_point(colour="#de2d26",size=1,alpha=0.35)+
geom_point(size=1.5,colour="red3")+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange3"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
yx[1,]
yx[1:10,]
# ADA8 – Astronomical Data Analysis Summer School
# Bayesian tutorial by Rafael S. de Souza - ELTE, Hungary & COIN
#
# Partial example from Bayesian Models for Astrophysical Data
# by Hilbe, de Souza & Ishida, 2016, Cambridge Univ. Press
#
# Example of Bayesian normal linear regression in R using JAGS
# synthetic data
# 1 response (y) and 1 explanatory variable (x1) with quadratic and cubic terms
require(R2jags)
source("..//Auxiliar_functions/jagsresults.R")
require(ggplot2)
require(mcmcplots)
set.seed(1056)                           # set seed to replicate example
nobs= 500                                # number of observations
x1 <- runif(nobs,-10,10)                 # random uniform variable
xb <- -3 + 6*x1 - 1.75*x1^2 + 0.25*x1^3      # linear predictor
y <- rnorm(nobs, xb, sd=20)              # create y as adjusted random normal variate
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
# prepare data for JAGS input
X <- model.matrix(~ 1 + x1+I(x1^2)+I(x1^3))
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
# JAGS model
NORM <-" model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Uniform prior for standard deviation
tau <- pow(sigma, -2)       # precision
sigma ~ dunif(0, 100)       # standard deviation
# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- beta[1]+beta[2]*X[i,2]+beta[3]*X[i,2]^2+beta[4]*X[i,2]^3
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]+beta[3]*xx[j]^2+beta[4]*xx[j]^3
mux[j]  <- etax[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
# set initial values
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
# define parameters
params <- c("beta", "sigma","Yx")
#params <- c("beta", "sigma")
# fit
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
jagsresults(x=jagsfit, params=c("beta", "sigma"))
# Plot
yx <- jagsresults(x=jagsfit, params=c('Yx'))
normdata <- data.frame(x1,y)
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(normdata,aes(x=x1,y=y))+ geom_point(colour="#de2d26",size=1,alpha=0.35)+
geom_point(size=1.75,colour="green3")+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange3"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
install.packages("ploty")
install.packages("ploty",type="source")
library(INLA)
25/18
15.2-0.1*15.2
13.68-0.1*13.68
A <- 35.75
B <- 42.25
15*A+16*B
25*A+10*B
18*A +13*B
1316.25-1212.25
1316.25-1192.75
12000/50
240*3
9000/720
7876*1.02
8033.52*1.02
8194.19*1.02
8358.074*1.02
8525.235*1.02
8695.74*1.02
7876+8033.52+8194.19+8358.074+8525.235
7876+8033.52+8194.19+8358.074+8525.235+8695.74
7.25-3.45
72/0.2
360*0.35
126+72
300*1.6
480*0.55
14*25.250
353.5*1.22
431.27-353.5
77.77-45
2400/12
27/60
4.45*600
g = 22
p = 9
(2*g+1*p)*(1-0.17)
550/0.25
550/0.55
1000/0.25
400*0.85
9*7*60
3780/15
(3780/15)*0.75*175
(3780/20)*0.95*198
(3780/15)*0.75*175
(3780/18)*0.73*188
(3780/13)*0.84*145
(3780/20)*0.95*198
(3780/17)*0.81*170
14000+145+3*20*25
13000+170+4*20*28
14500+145+3*20*25
16000+130+3*20*30
14500+140+4*20*25
66
14000+145+3*20*25
13000+170+4*20*28
14500+140+4*20*25
16000+130+3*20*30
9*7*60
(9*7*60)/15*175*(1-0.75)
(15.5+21+16+15.5)*0.7
(14.5+18+16.5+13)*0.7
(14.5+18+16.5+13)
(14.5+18+16.5+13)*0.7
47.6-43.4
60/15
(60/15)*0.75*175
(60/18)*0.73*188
(60/13)*0.84*145
(60/20)*0.95*198
(60/17)*0.81*170
250*12
12-0.2*12
9.6*(250*1.18)
3000-2832
7876+1.2*(7876)
17327.2+1.2*(17327.2)
7876+1.02*(7876)
15909.52+1.02*(15909.52)
32137.23+1.02*(32137.23)
45/15
45/0.15
300*1.6
480*0.55
12.5-7.25
5.25*210
12.5-7.25-2.65-0.1
2.5*210
12.5-3.45-2.65-0.1
6.3*250
1575-525
1575/525
30*24
9000/720
550/0.55
1000/0.25
4000*0.1
400*0.85
80*0.05
21.99*0.8*3+52.9*0.8*2
175-137.416
37.584/(0.99*0.8)
14000+145+3*20*25
rrr
14000+145+3*20*25
13000+170+4*20*28
14500+140+4*20*25
16000+135+3*20*30
15.5+21+16+15.5
68*0.7
47.6-43.47
3/4-1/2-1/8
3/4+0.5*3/4
1.125-0.125
3/4*0.5
3/4
0.75*1.5
3/4-1/2*3/4
0.375-1/8*0.375
3/4+0.5*3/4
0.375-1/8*0.375
3/4
0.75*0.5
0.75*1.5
1.125-0.328125
4/5
100*3/4
75*0.5
75-37.5
37.5-1/8*37.5
17/26
30000/12
